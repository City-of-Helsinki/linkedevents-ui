// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Image add form ImagePicker component should render correctly with data 1`] = `
<div
  className="image-picker"
>
  <div>
    <div
      className="MuiCircularProgress-root-1 MuiCircularProgress-primaryColor-2 loading-spinner"
      role="progressbar"
      style={
        Object {
          "height": 50,
          "width": 50,
        }
      }
    >
      <svg
        className="MuiCircularProgress-svgIndeterminate-4"
        viewBox="0 0 50 50"
      >
        <circle
          className="MuiCircularProgress-circle-6 MuiCircularProgress-circleIndeterminate-7"
          cx={25}
          cy={25}
          fill="none"
          r={20}
          strokeWidth={3.6}
          style={Object {}}
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`Image add form ImagePicker component should render view by default 1`] = `
<div
  className="image-picker"
>
  <div>
    <WithStyles(CircularProgress)
      className="loading-spinner"
      size={50}
    />
  </div>
  <Modal
    animation={true}
    aria-labelledby="ModalHeader"
    autoFocus={true}
    backdrop={true}
    bsClass="modal"
    dialogComponentClass={[Function]}
    enforceFocus={true}
    id="image-modal"
    keyboard={true}
    manager={
      ModalManager {
        "add": [Function],
        "containers": Array [],
        "data": Array [],
        "handleContainerOverflow": true,
        "hideSiblingNodes": true,
        "isTopModal": [Function],
        "modals": Array [],
        "remove": [Function],
      }
    }
    onHide={[Function]}
    renderBackdrop={[Function]}
    restoreFocus={true}
    show={false}
    width="600px"
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={false}
      closeLabel="Close"
    >
      <button
        aria-label="Close"
        className="close"
        data-dismiss="modal"
        onClick={[Function]}
      >
        <span
          aria-hidden="true"
        >
          Ã—
        </span>
      </button>
      <ModalTitle
        bsClass="modal-title"
        componentClass="h4"
        id="ModalHeader"
      >
        <FormattedMessage
          id="new-image"
          values={Object {}}
        />
      </ModalTitle>
      <div
        className="file-upload-wrapper"
      >
        <input
          onChange={[Function]}
          style={
            Object {
              "display": "none",
            }
          }
          type="file"
        />
        <WithStyles(Button)
          className="upload-img"
          color="primary"
          onClick={[Function]}
          raised={true}
        >
          <FormattedMessage
            id="upload-image"
            values={Object {}}
          />
        </WithStyles(Button)>
      </div>
      <div
        className="external-file-upload"
      >
        <div
          className="hel-text-field"
        >
          <label
            className="hel-label"
          >
            <FormattedMessage
              id="upload-image-from-url"
              values={Object {}}
            />
          </label>
          <input
            className="form-control"
            id="externalImageURL"
            onSubmit={[Function]}
          />
        </div>
        <WithStyles(Button)
          className="attach-external"
          color="primary"
          onClick={[Function]}
          raised={true}
        >
          <FormattedMessage
            id="attach-image-to-event"
            values={Object {}}
          />
        </WithStyles(Button)>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h4"
        id="ModalBodyTitle"
      >
        <FormattedMessage
          id="use-existing-image"
          values={Object {}}
        />
      </ModalTitle>
      <div
        className="button-row"
      >
        <WithStyles(Button)
          className="delete"
          color="accent"
          disabled={true}
          onClick={[Function]}
          primary="false"
          raised={true}
        >
          <FormattedMessage
            id="delete-from-filesystem"
            values={Object {}}
          />
        </WithStyles(Button)>
        <div
          className="wrapper-right"
        >
          <WithStyles(Button)
            className="edit"
            disabled={true}
            onClick={[Function]}
            primary="false"
            raised={true}
          >
            <FormattedMessage
              id="edit-selected-image"
              values={Object {}}
            />
          </WithStyles(Button)>
          <WithStyles(Button)
            className="attach"
            color="primary"
            onClick={[Function]}
            raised={true}
          >
            <FormattedMessage
              id="attach-image-to-event"
              values={Object {}}
            />
          </WithStyles(Button)>
        </div>
      </div>
      <Connect(ImageGalleryGrid)
        editor={
          Object {
            "values": Object {},
          }
        }
        images={Object {}}
        user={Object {}}
      />
      <div
        style={
          Object {
            "clear": "both",
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    />
  </Modal>
</div>
`;
